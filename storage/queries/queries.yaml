Dashboard:
  GetStore: |
    MATCH (s:Store) 
    RETURN round(s.totalExpens, 1) AS expense, 
           round(s.totalRevenue, 1) AS revenue
  GetRevenueByMonths: |
    MATCH (c:Transaction)-[e:INCOME]->(s:Store) 
    WHERE toString(c.signingDate) =~ $date 
    RETURN e.totalValue AS totalValue, 
           c.signingDate AS date;
  GetExpenseByMonths: |
    MATCH (c:Transaction)-[e:EXPENSE]->(s:Store) 
    WHERE toString(c.signingDate) =~ $date 
    RETURN e.totalValue AS totalValue, 
           c.signingDate AS date;
  GetTotalPets: |
    MATCH (p:Pet) 
    OPTIONAL MATCH (i:Invoice)-[:PURCHASE]->(p) 
    WITH SUM(i.totalAmount) AS sold, 
         SUM(p.remainingStock) AS available 
    RETURN sold, available;
  GetPPRevenueByMonths: |
    MATCH (i:Invoice WHERE toString(i.dateCreated) =~ $date)-[r:PURCHASE]->(p) 
    WHERE p:Pet OR p:PetTool 
    RETURN CASE 
             WHEN p:Pet THEN 'Pet' 
             ELSE 'PetTool' 
           END AS productType, 
           collect(toString(i.dateCreated)) AS invoiceDate, 
           collect(r.price) AS revenue 
    ORDER BY invoiceDate
  GetStaffTopKPIList: |
    MATCH (s:Staff)-[c:CREATED]->(i:Invoice) 
    WHERE toString(c.dateCreated) =~ $date 
    ORDER BY c.totalValue DESC 
    LIMIT 3 
    RETURN s.staffName AS staffName, 
           c.totalValue AS totalValue;

Invoice:
  GetInvoices: |
    MATCH(i:Invoice) 
    WHERE toString(i.dateCreated) =~ $date 
    RETURN {
    invoiceId: i.invoiceId, 
    totalAmount: i.totalAmount, 
    dateCreated: apoc.temporal.format(i.dateCreated, 'dd-MM-yyyy HH:mm:ss'),
    totalCost: i.totalCost } AS i
  GetDetailInvoice: |
   MATCH (t:Transaction)-[rp:PAY_FOR]->(i:Invoice {invoiceId: $id})-[r:PURCHASE]->(p:Pet|PetTool) 
    WITH 
        {transactionId: t.transactionId, moneyRecieved: t.moneyRecieved, status: rp.status, type: t.type} AS transaction,
        {
            productName: CASE 
                            WHEN p:Pet THEN p.petName 
                            WHEN p:PetTool THEN p.toolName 
                            ELSE NULL 
                        END,
            price: p.price, 
            quantity: r.quantity
        } AS products
    RETURN transaction, collect(products) AS productList

  DeleteInvoice: |
    MATCH (i:Invoice{toString(dateCreated) ~= $date})-[r]->(t:Transaction) 
    DETACH DELETE t, i

Staff:
  GetStaffsWorking: |
    MATCH (st:Staff)-[r:Role]->(:Store) 
    OPTIONAL MATCH (st)-[sw:SHIFTWORK]->(:Service) 
    WHERE toString(st.date) =~ $date 
    WITH st, r, SUM(sw.hour) AS sumOfWorkHours, 
         collect(date) AS dateWorks 
    RETURN st, r, sumOfWorkHours, dateWorks
  PaySalary: ""

Product:
  GetProducts: |
    MATCH (i:Invoice WHERE toString(i.dateCreated) =~ $date)-[r:PURCHASE]->(p:Pet|PetTool) 
    WITH collect(i) as invoiceList, sum(r.quantity) AS totalQuantitySold, 
         sum(r.price) AS totalRevenue, 
         p 
    RETURN invoiceList, totalQuantitySold, totalRevenue, p
  GetDetailProduct: ""

Contract:
  GetContracts: |
   MATCH (c:Contract)-[o:OWNED_BY]->(v:Vendor) 
    WITH toString(c.signingDate) AS signingDate, c, o, v
    SKIP $skipValue 
    LIMIT $limitValue 
    RETURN c{.*, signingDate: signingDate} AS c, o, v

  GetTotalContract: |
    MATCH (c:Contract) 
    RETURN COUNT(c) AS total;
  GetDetailContract: |
   MATCH (i:Pet|PetTool|Food)<-[p:PROVIDES]-(:Contract {contractId: $id}) 
    WITH p.totalAmount AS totalAmount, p.totalPrice AS totalPrice,
      CASE 
        WHEN i:Pet THEN i.petName
        WHEN i:PetTool THEN i.toolName
        WHEN i:Food THEN i.foodName
        ELSE NULL
      END AS productName
    RETURN {
      productName: productName, 
      totalAmount: totalAmount, 
      totalPrice: totalPrice
    } AS p

  CreateNewContract: |
    CREATE (:Contract {contractId: $id, 
                       title: btrim($title,' '), 
                       totalQuantity: $totalQuantity, 
                       totalCost: $totalCost, 
                       signingDate: $date, 
                       amount})-[:$ownedBy]-(:$vendor)
  CreateIncludeRelationShip: |
                    CREATE (:Contract {contractId: $id, 
                       title: btrim($title,' '), 
                       totalQuantity: $totalQuantity, 
                       totalCost: $totalCost, 
                       signingDate: $date, 
                       amount})-[:$ownedBy]
  ConfirmContract: |
    MATCH (c:Contract {contractId: $id}) 
    SET c.status = 'Duyá»‡t'
  DeleteContract: |
    MATCH (c:Contract {contractId: $id}) 
    DETACH DELETE c

Promotion:
  GetPromotions: |
    MATCH (p:Promotion)-[a:ACTIVE_ON]->(pt) 
    WITH p, a, 
         toString(a.dateStart) AS dateStart, 
         toString(a.dateEnd) AS dateEnd, 
         CASE 
           WHEN pt:Pet THEN pt.petName 
           WHEN pt:PetTool THEN pt.toolName 
           ELSE null 
         END AS productApplies 
    RETURN p, 
           {dateStart: dateStart, dateEnd: dateEnd} AS a, 
           collect(productApplies) as productApplies
  DeletePromotion: |
    MATCH (p:Promotion{id: $id}) 
    DETACH DELETE p
  AddPromotion: |
    CREATE (:Promotion {id: $id, 
                        value: $value, 
                        description: $description, 
                        title: $title})-[:ACTIVE_ON {dateStart: $dateStart, 
                                                     dateEnd: $dateEnd}]->(:$node)
